[
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "hey guys, do you know if there\u2019s anything out there that can help me build a select with the input inside the trigger? I\u2019m thinking about <http:\/\/www.ember-power-select.com\/docs\/multiple-selection> just without the multiple selection.",
        "ts": "1469618048.000205"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "I\u2019m sure I could customize power-select enough to achieve that but I was wondering if there was some addon that builds on that already",
        "ts": "1469618081.000206"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "ah never mind",
        "ts": "1469618345.000207"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "found <https:\/\/github.com\/cibernox\/ember-power-select-typeahead>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "cibernox\/ember-power-select-typeahead",
                "title_link": "https:\/\/github.com\/cibernox\/ember-power-select-typeahead",
                "text": "ember-power-select-typeahead - Typeahead component built on top of ember-power-select",
                "fallback": "GitHub: cibernox\/ember-power-select-typeahead",
                "thumb_url": "https:\/\/avatars1.githubusercontent.com\/u\/265339?v=3&s=400",
                "from_url": "https:\/\/github.com\/cibernox\/ember-power-select-typeahead",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1469618350.000208"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "cibernox has thought about everything!",
        "ts": "1469618358.000210"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "the typeahead is slightly different tho",
        "ts": "1469618781.000211"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "and it\u2019s broken in 1.0.0",
        "ts": "1469618789.000212"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "but the idea is that you pass `triggerComponent=\u201cmy-custom-trigger\u201d beforeOptionsComponent=null`",
        "ts": "1469618818.000213"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "ah nice, thanks for the tip, didn\u2019t know about beforeOptionsComponent",
        "ts": "1469618854.000214"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "I guess I can take inspiration from typeahead",
        "ts": "1469618863.000215"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "actually, if you create a trigger component",
        "ts": "1469618897.000216"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "that basically has an input like the one here: <https:\/\/github.com\/cibernox\/ember-power-select\/blob\/master\/addon\/templates\/components\/power-select\/before-options.hbs>",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "cibernox\/ember-power-select",
                "title_link": "https:\/\/github.com\/cibernox\/ember-power-select\/blob\/master\/addon\/templates\/components\/power-select\/before-options.hbs",
                "text": "ember-power-select - The extensible select component built for ember.",
                "fallback": "GitHub: cibernox\/ember-power-select",
                "thumb_url": "https:\/\/avatars1.githubusercontent.com\/u\/265339?v=3&s=400",
                "from_url": "https:\/\/github.com\/cibernox\/ember-power-select\/blob\/master\/addon\/templates\/components\/power-select\/before-options.hbs",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/github.com\/apple-touch-icon.png",
                "id": 1
            }
        ],
        "ts": "1469618915.000217"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "that is basically what you need",
        "ts": "1469618933.000219"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "very nice",
        "ts": "1469618984.000220"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "I\u2019ll do that, thanks",
        "ts": "1469618993.000221"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "that way I can customize just the few actions I need to change",
        "ts": "1469619019.000222"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "if you focus on the very basic",
        "ts": "1469619032.000223"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "`&lt;input oninput={{select.actions.search}} value={{select.searchText}}&gt;`",
        "edited": {
            "user": "U040MK408",
            "ts": "1469619086.000000"
        },
        "ts": "1469619047.000224"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "that is enough to make it work",
        "ts": "1469619053.000225"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "the you probably want the input to show the selected value when you are not typing",
        "ts": "1469619120.000227"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "ir maybe",
        "ts": "1469619123.000228"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "```\n{{#if select.isOpen}}\n  &lt;input oninput={{select.actions.search}} value={{select.searchText}}&gt;\n{{else}}\n  {{select.selected}}\n{{\/if}}\n```",
        "ts": "1469619161.000229"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "that way the input appears when you open only",
        "ts": "1469619173.000230"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "it depends on what you want",
        "ts": "1469619189.000231"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "I\u2019d like it to always show but that should be easy to customize",
        "ts": "1469619218.000232"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "in that case, `&lt;input oninput={{select.actions.search}} value={{value}}&gt;`",
        "ts": "1469619247.000233"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "and value is probably a CP that depending on whether the component is opened or not, it contains `select.searchText` or the selected value (stringified)",
        "edited": {
            "user": "U040MK408",
            "ts": "1469619295.000000"
        },
        "ts": "1469619286.000234"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "I actually need to just to an unrelated action on select",
        "ts": "1469619336.000236"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "or maybe `&lt;input oninput={{select.actions.search}} value={{select.searchText}} placeholder={{select.selected}}&gt;`",
        "ts": "1469619337.000237"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "so I can skip the value={{value}} part I think",
        "ts": "1469619346.000238"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "the important part I want to keep is the search",
        "ts": "1469619369.000239"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "didn\u2019t think about `\n`&lt;input oninput={{select.actions.search}}&gt;` :slightly_smiling_face: I\u2019ll use it",
        "ts": "1469619386.000240"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "the effort in 1.0.0 is standarize the public API received by subcomponents into a single object named `select`",
        "edited": {
            "user": "U040MK408",
            "ts": "1469619420.000000"
        },
        "ts": "1469619417.000241"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "<http:\/\/www.ember-power-select.com\/docs\/api-reference>",
        "ts": "1469619421.000243"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": "yeah that would be amazing",
        "ts": "1469619431.000244"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "check on the bottom the properties that this object has",
        "ts": "1469619436.000245"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "and the actions",
        "ts": "1469619438.000246"
    },
    {
        "type": "message",
        "user": "U09ABGTUJ",
        "text": ":+1:",
        "ts": "1469619445.000247"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "as long as you use properties or actions in that object, nothing will break",
        "ts": "1469619492.000248"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "that object is probably going to grow",
        "ts": "1469619503.000249"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "but not change",
        "ts": "1469619507.000250"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "I\u2019m building right now a very small widget in vue.js",
        "ts": "1469619603.000251"
    },
    {
        "type": "message",
        "user": "U18BAPQ82",
        "text": "Hi guys, I'm having an issue with computed properties. I have a model with a hasMany relationship and a computed property dependent on @each.someProp. I have one entry in the hasMany, and when I see someProp on that entry update three times in quick succession, the parent's CP recalculates but only for the first change to someProp. This leaves the CP out of date. Any ideas?",
        "ts": "1469627211.000252"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "so if you do `this.get(\u2018relationship\u2019).forEach(record =&gt; record.set(\u2019someProp\u2019, someVal))`",
        "ts": "1469628143.000253"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "so you are updating many records",
        "edited": {
            "user": "U040MK408",
            "ts": "1469628155.000000"
        },
        "ts": "1469628153.000254"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "it doesn\u2019t recompute with the last state?",
        "ts": "1469628167.000256"
    },
    {
        "type": "message",
        "user": "U18BAPQ82",
        "text": "Hmm, not sure - at the moment the relationship will only ever have a single entry",
        "ts": "1469629005.000257"
    },
    {
        "type": "message",
        "user": "U18BAPQ82",
        "text": "The issue is more like, I do `this.get(\"relationship.firstObject\").set(\"someProp\", someVal)` three times in quick succession, and the CP on the parent only updates for the first one",
        "ts": "1469629115.000258"
    },
    {
        "type": "message",
        "user": "U062LD65Q",
        "text": "so you have `this.get(\u2018relationship\u2019).then((r) =&gt; { r.set(\u2019sompeProp\u2019, 1); r.set(\u2019sompeProp\u2019, 2); r.set(\u2019sompeProp\u2019, 3)})` ?",
        "ts": "1469629124.000259"
    },
    {
        "type": "message",
        "user": "U062LD65Q",
        "text": "but the computed property gets `1` ?",
        "ts": "1469629140.000260"
    },
    {
        "type": "message",
        "user": "U18BAPQ82",
        "text": "Yeah, and then never seems to reevaluate with 2 or 3",
        "ts": "1469629168.000261"
    },
    {
        "type": "message",
        "user": "U062LD65Q",
        "text": "how exactly do you set `someProp`?",
        "ts": "1469629181.000262"
    },
    {
        "type": "message",
        "user": "U062LD65Q",
        "text": "could it be that you\u2019re setting it outside an Ember runloop?",
        "ts": "1469629190.000263"
    },
    {
        "type": "message",
        "user": "U18BAPQ82",
        "text": "`someProp` is actually a `computed.and` of `a`, `b` and `c`",
        "ts": "1469629230.000264"
    },
    {
        "type": "message",
        "user": "U18BAPQ82",
        "text": "where `a`, `b` and `c` are themselves CPs, each dependent on yet another CP, call it `d`",
        "ts": "1469629264.000265"
    },
    {
        "type": "message",
        "user": "U18BAPQ82",
        "text": "so I set `d`, `a`, `b` and `c` update",
        "ts": "1469629281.000266"
    },
    {
        "type": "message",
        "user": "U062LD65Q",
        "text": "and `a`, `b` and `c` all update correctly?",
        "ts": "1469629296.000267"
    },
    {
        "type": "message",
        "user": "U18BAPQ82",
        "text": "Yeah",
        "ts": "1469629299.000268"
    },
    {
        "type": "message",
        "user": "U062LD65Q",
        "text": "three times?",
        "ts": "1469629304.000269"
    },
    {
        "type": "message",
        "user": "U18BAPQ82",
        "text": "`someProp` fires changes three times, as expected",
        "ts": "1469629305.000270"
    },
    {
        "type": "message",
        "user": "U18BAPQ82",
        "text": "but the CP on the parent model only recalculates off the back of the first change notification",
        "ts": "1469629331.000271"
    },
    {
        "type": "message",
        "user": "U062LD65Q",
        "text": "well, it\u2019s pretty hard to say what\u2019s going on exactly without the code. But you can always call <http:\/\/emberjs.com\/api\/classes\/Ember.Object.html#method_notifyPropertyChange> manually",
        "attachments": [
            {
                "title": "Ember.js: Ember.Object",
                "title_link": "http:\/\/emberjs.com\/api\/classes\/Ember.Object.html#method_notifyPropertyChange",
                "text": "Ember.js helps developers be more productive out of the box. Designed with developer ergonomics in mind, its friendly APIs help you get your job done\u2014fast.",
                "fallback": "Ember.js: Ember.Object",
                "thumb_url": "http:\/\/emberjs.com\/images\/tomster-sm.png",
                "from_url": "http:\/\/emberjs.com\/api\/classes\/Ember.Object.html#method_notifyPropertyChange",
                "thumb_width": 220,
                "thumb_height": 220,
                "service_icon": "http:\/\/emberjs.com\/images\/favicon.png",
                "service_name": "emberjs.com",
                "id": 1
            }
        ],
        "ts": "1469629393.000272"
    },
    {
        "type": "message",
        "user": "U062LD65Q",
        "text": "which should force an update of the computed properties dependent on the property",
        "ts": "1469629434.000274"
    },
    {
        "type": "message",
        "user": "U07E9GKUZ",
        "text": "<@U18BAPQ82>: any chance you could build a ember twiddle to reproduce?",
        "ts": "1469629505.000275"
    },
    {
        "type": "message",
        "user": "U18BAPQ82",
        "text": "<@U07E9GKUZ>: Unfortunately I don't have the time right now :disappointed:",
        "ts": "1469630759.000276"
    },
    {
        "type": "message",
        "user": "U07E9GKUZ",
        "text": "usually, compute properties problems are caused by functions only being fired only when they\u2019re accessed or observing the wrong key",
        "ts": "1469631063.000277"
    },
    {
        "type": "message",
        "user": "U18BAPQ82",
        "text": "<@U07E9GKUZ>: Yeah, that'd be my first guess, but the CP was only updating the first time when its dependent key updated three times",
        "ts": "1469631398.000278"
    },
    {
        "type": "message",
        "user": "U18BAPQ82",
        "text": "<@U062LD65Q>: I tried with `notifyPropertyChange` and it worked, thanks! :slightly_smiling_face:",
        "ts": "1469631438.000279"
    },
    {
        "type": "message",
        "user": "U18BAPQ82",
        "text": "Just to clarify, I ditched `d` and the dependency `a`, `b` and `c` had on it, and instead of updating `d` to trigger the others to recompute, I called `notifyPropertyChange` on `a`, `b` and `c`. `someProp` updates three times, and so does the parent's CP :slightly_smiling_face:",
        "ts": "1469631965.000280"
    },
    {
        "type": "message",
        "user": "U062LD65Q",
        "text": "<@U18BAPQ82>: you should keep in mind that this is really a hack, and there\u2019s probably something else wrong which breaks the computed property observing from happening properly.",
        "ts": "1469633358.000281"
    },
    {
        "type": "message",
        "user": "U062LD65Q",
        "text": "there\u2019s a small chance that something could be wrong ember-data, btw as well",
        "ts": "1469633389.000282"
    },
    {
        "type": "message",
        "user": "U062LD65Q",
        "text": "another question - do you actually need all three values of the computed property as it changes?",
        "ts": "1469633470.000283"
    },
    {
        "type": "message",
        "user": "U062LD65Q",
        "text": "or do you need only the last value?",
        "ts": "1469633483.000284"
    },
    {
        "type": "message",
        "user": "U062LD65Q",
        "text": "and are you definitely seeing the first computed value and not the last computed value (e.g. if they are the same)?",
        "ts": "1469633558.000285"
    },
    {
        "type": "message",
        "user": "U062LD65Q",
        "text": "if the final value is the same as the first value and all of the changes happen in a single runloop, then the parent property won\u2019t change",
        "ts": "1469634986.000286"
    },
    {
        "user": "U1VLX52AF",
        "text": "<@U1VLX52AF|liveedu> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1469643746.000287"
    },
    {
        "type": "message",
        "user": "U18BAPQ82",
        "text": "<@U062LD65Q>: Yeah, it feels ever so slightly hacky. I saw a discussion about a similar-sounding issue in ED, but the recommended fix for that didn't fix my issue. I don't need all three updates, no - I'm only interested in the final result, and I was definitely seeing the first value: the three updates were with values `true`, `false` and `false`, the value I expected to see was therefore `false`, but I was only getting an update for the `true`. Is there a way to ensure the changes all happen in a single runloop?",
        "ts": "1469687497.000288"
    }
]