[
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "hey i have an ES6 question ... if I import some named exports like: `import * as count from '.\/count';`",
        "ts": "1474546678.000704"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "and later I want to get properties off this import but in an abstracted way like:",
        "ts": "1474546712.000705"
    },
    {
        "type": "message",
        "subtype": "file_share",
        "text": "<@U04BD6KB1|ksnyde> uploaded a file: <https:\/\/emberlondon.slack.com\/files\/ksnyde\/F2ELKT687\/-.js|Untitled>",
        "file": {
            "id": "F2ELKT687",
            "created": 1474546746,
            "timestamp": 1474546746,
            "name": "-.js",
            "title": "Untitled",
            "mimetype": "text\/plain",
            "filetype": "javascript",
            "pretty_type": "JavaScript\/JSON",
            "user": "U04BD6KB1",
            "editable": true,
            "size": 129,
            "mode": "snippet",
            "is_external": false,
            "external_type": "",
            "is_public": true,
            "public_url_shared": false,
            "display_as_bot": false,
            "username": "",
            "url_private": "https:\/\/files.slack.com\/files-pri\/T03SSL0FF-F2ELKT687\/-.js?t=xoxe-3910680525-115741181265-116496169492-28d023e02c",
            "url_private_download": "https:\/\/files.slack.com\/files-pri\/T03SSL0FF-F2ELKT687\/download\/-.js?t=xoxe-3910680525-115741181265-116496169492-28d023e02c",
            "permalink": "https:\/\/emberlondon.slack.com\/files\/ksnyde\/F2ELKT687\/-.js",
            "permalink_public": "https:\/\/slack-files.com\/T03SSL0FF-F2ELKT687-7571397ca8",
            "edit_link": "https:\/\/emberlondon.slack.com\/files\/ksnyde\/F2ELKT687\/-.js\/edit",
            "preview": "import * as count from '.\/count';\r\n\r\nconst modules = [\r\n  count\r\n];\r",
            "preview_highlight": "<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text\/plain',window.getSelection().toString().replace(\/\\u200b\/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-keyword\">import<\/span> <span class=\"cm-keyword\">*<\/span> <span class=\"cm-keyword\">as<\/span> <span class=\"cm-def\">count<\/span> <span class=\"cm-keyword\">from<\/span> <span class=\"cm-string\">'.\/count'<\/span>;<\/pre><\/div>\n<div><pre>&#8203;<\/pre><\/div>\n<div><pre><span class=\"cm-keyword\">const<\/span> <span class=\"cm-def\">modules<\/span> <span class=\"cm-operator\">=<\/span> [<\/pre><\/div>\n<div><pre>  <span class=\"cm-variable\">count<\/span><\/pre><\/div>\n<div><pre>];<\/pre><\/div>\n<\/div>\n<\/div>\n",
            "lines": 9,
            "lines_more": 4,
            "preview_is_truncated": false,
            "channels": [
                "C03SSL0GP"
            ],
            "groups": [],
            "ims": [],
            "comments_count": 0
        },
        "user": "U04BD6KB1",
        "upload": true,
        "display_as_bot": false,
        "username": "<@U04BD6KB1|ksnyde>",
        "bot_id": null,
        "ts": "1474546746.000706"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "what's the syntax? What scope does the import sit in? don't think it actually is a property of `this`",
        "ts": "1474546791.000707"
    },
    {
        "type": "message",
        "user": "U043AB2QT",
        "text": "<@U04BD6KB1> Could you give me an example of what `.\/count` looks like please?",
        "ts": "1474548975.000708"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "Just exports two named functions ... saveState and loadState",
        "ts": "1474549066.000709"
    },
    {
        "type": "message",
        "user": "U043AB2QT",
        "text": "Ok, so you want?\n\n```\nmodules.map(m =&gt; {\n  const { loadState } = m;\n});\n```",
        "ts": "1474549121.000710"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "Correct; where m references a named import",
        "ts": "1474549196.000711"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "If \"m\" were in a class or function I'd think of it as ... errr no backticks on IOS keyboard",
        "ts": "1474549299.000712"
    },
    {
        "type": "message",
        "user": "U043AB2QT",
        "text": "Hold down comma and you get a pop up with a tickback on it",
        "ts": "1474549331.000713"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "this[m]",
        "ts": "1474549332.000714"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "Sweet",
        "ts": "1474549341.000715"
    },
    {
        "type": "message",
        "user": "U043AB2QT",
        "text": "I'm not quite sure what you mean by that. You're mapping over an array, so `m` is going to be the element in the array.  which, in this case is `count`. Which looks like this:\n\n```\n{\n  saveState() {},\n  loadState() {}\n}\n```\n\nUnless I'm totally not understanding you actual question.",
        "ts": "1474549437.000716"
    },
    {
        "type": "message",
        "user": "U043AB2QT",
        "text": "Not sure where `this` comes in to it",
        "ts": "1474549448.000717"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "All I'm pointing out is is that \"m\" is a string and to do what I need I'd need to dereference using the string off of some scope",
        "ts": "1474549511.000718"
    },
    {
        "type": "message",
        "user": "U043AB2QT",
        "text": "How is `m` a string?",
        "ts": "1474549540.000719"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "Look at my prior code snippet",
        "ts": "1474549554.000720"
    },
    {
        "type": "message",
        "user": "U043AB2QT",
        "text": "`import * as count` doesn't give you a string does it? It's an object no?",
        "ts": "1474549585.000721"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "Yes right but m is derived from an array of strings which are the keys of the import names",
        "ts": "1474549633.000722"
    },
    {
        "type": "message",
        "user": "U043AB2QT",
        "text": "Ah, so, in your example above, your array is supposed to be:\n\n```\nconst modules = [\n  'count'\n]\n```\n\n?????",
        "ts": "1474549695.000723"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "Yes",
        "ts": "1474549709.000724"
    },
    {
        "type": "message",
        "user": "U043AB2QT",
        "text": "Because `count` not a string in your example",
        "ts": "1474549711.000725"
    },
    {
        "type": "message",
        "user": "U043AB2QT",
        "text": "Hence my confusion",
        "ts": "1474549715.000726"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "The question is just what scope can I dereference off of to get imports? It seems to behave differently from variable declarations.",
        "ts": "1474549816.000727"
    },
    {
        "type": "message",
        "user": "U043AB2QT",
        "text": "Yeh, I get you now....",
        "ts": "1474549937.000728"
    },
    {
        "type": "message",
        "user": "U043AB2QT",
        "text": "So, will you have a number of imports that will all have a `loadState` function on them that you want to loop over and call?",
        "ts": "1474550025.000729"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "Yes that right ",
        "ts": "1474550041.000730"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "Anyway, I've solved it by taking a different path :)",
        "ts": "1474550175.000731"
    },
    {
        "type": "message",
        "user": "U043AB2QT",
        "text": "Not sure if this what you're going for but the pattern I might use for that sort of thing mis more like this:\n\n```\n\/\/ commands.js\nimport count from '.\/commands\/count';\nimport foo from '.\/commands\/foo';\n\nexport default {\n  count, foo\n};\n\n\/\/ index.js\nimport commands from '.\/commands';\n\nObject.keys(commands).map(name =&gt; {\n  const { loadState } = commands[name];\n});\n```",
        "edited": {
            "user": "U043AB2QT",
            "ts": "1474550203.000000"
        },
        "ts": "1474550182.000732"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "Yeah that might work ... thanks <@U043AB2QT> ",
        "ts": "1474550382.000735"
    },
    {
        "type": "message",
        "user": "U043AB2QT",
        "text": "np",
        "ts": "1474550399.000736"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "some stats of the glimmer2 update of EPS",
        "ts": "1474550795.000737"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "```\n# Ember 2.8.1\nFile sizes:\n - dummy-b49fab307eb53483f46247a5892164df.js: 570.75 KB (69.29 KB gzipped)\n - dummy-eb174a3d9c20204f4aa35bfb65ac6669.css: 20.78 KB (4.41 KB gzipped)\n - vendor-0723d8dc96ff91e83fbdd64606e3a890.js: 1.83 MB (482.74 KB gzipped)\n - vendor-571d67531622102402268bd2c623c17f.css: 167 B (119 B gzipped)\n\n# Ember 2.9.0-beta.3 (Glimmer 2)\nFile sizes:\n - dummy-b89d91b27bf9f278fee0f9204d1665a7.js: 333.02 KB (48.32 KB gzipped)\n - dummy-eb174a3d9c20204f4aa35bfb65ac6669.css: 20.78 KB (4.41 KB gzipped)\n - vendor-7b14b786cb9ceb3b1da0783d88c14c22.js: 1.85 MB (490.59 KB gzipped)\n - vendor-571d67531622102402268bd2c623c17f.css: 167 B (119 B gzipped)\n\n# Total savings:\n217.73 KB (13.12 KB gzip)\n```",
        "ts": "1474550798.000738"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "probably an obvious answer but why does the vendor.js not decrease at a similar rate to the internal js?",
        "ts": "1474550903.000739"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "vendor contains the libraries",
        "ts": "1474550933.000740"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "so it's actually a big bigger",
        "ts": "1474550942.000741"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": "reduction in file size is all from templates getting smaller, right?",
        "ts": "1474550963.000742"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "what actually shinks in size a lot is the templates",
        "ts": "1474550963.000743"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "yes",
        "ts": "1474550967.000744"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": "jinx",
        "ts": "1474550969.000745"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": ":smile:",
        "ts": "1474550973.000746"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "are there any perf numbers out there yet?",
        "ts": "1474550985.000747"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "not yet",
        "ts": "1474550998.000748"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "how good a proxy is file size to perf? I'd guess not so good.",
        "ts": "1474551011.000749"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": "only in relation to parsing time",
        "ts": "1474551023.000750"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": "initial boot",
        "ts": "1474551030.000751"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "well, not only",
        "ts": "1474551031.000752"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "less JS means less parsing time",
        "ts": "1474551043.000753"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "but templates also went from JS to JSON",
        "ts": "1474551057.000754"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "shipped as a string",
        "ts": "1474551068.000755"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "`JSON.parse` is faster than parsing JS",
        "ts": "1474551084.000756"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": "true",
        "ts": "1474551089.000757"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "so even if the size was the same, the parsing would be faster",
        "ts": "1474551100.000758"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "I even think that templates are parsed on demand now",
        "ts": "1474551110.000759"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "yeah the lazy loading could be really important",
        "ts": "1474551127.000760"
    },
    {
        "type": "message",
        "user": "U040MK408",
        "text": "so you don't actually parse the template until you first render it",
        "ts": "1474551129.000761"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": "yeah, and the compilation tiers are strategically lazy too I believe",
        "ts": "1474551129.000762"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "how does it _feel_?",
        "ts": "1474551151.000763"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": "I don\u2019t think you\u2019ll see much change in initial render for now",
        "ts": "1474551173.000764"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": "sadly",
        "ts": "1474551176.000765"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": "putting it crudely, I think Ember.Object becomes the bottleneck",
        "ts": "1474551211.000766"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": "it makes components expensive to instantiate",
        "ts": "1474551265.000767"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "yeah that's got me trying to use helpers\/pure functions whenever I can",
        "ts": "1474551321.000768"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "are there any low hanging fruit in the cleanup of Ember.Object do you think?",
        "ts": "1474551372.000769"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": "unsure",
        "ts": "1474551433.000770"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": "wondering if \"glimmer components\" will introduce a new base class",
        "edited": {
            "user": "U03V8V08M",
            "ts": "1474551453.000000"
        },
        "ts": "1474551447.000771"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": "and we can do\n```\nclass KenComponent extends GlimmerComponent {\n  \/\/ ...\n}\n```",
        "ts": "1474551476.000773"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "I've heard that `KenComponent` is really good :wink:",
        "ts": "1474551497.000774"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": "that\u2019s an interesting side to all this actually\u2026 what\u2019s the story with angle-bracket components and `@prop` references?",
        "ts": "1474551534.000775"
    },
    {
        "type": "message",
        "user": "U0ASPMFPS",
        "text": "`var KenComponent = Glimmer.createComponent();`",
        "ts": "1474551556.000776"
    },
    {
        "text": "hides",
        "type": "message",
        "subtype": "me_message",
        "user": "U0ASPMFPS",
        "ts": "1474551562.000777"
    },
    {
        "type": "message",
        "user": "U03V8V08M",
        "text": "hahaha",
        "ts": "1474551567.000778"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "i did hear on some podcast a reference to angle-bracket components but it wasn't too instructive ... the main gist was that the Glimmer components will have a lot of the thinking behind angle brackets in them but will not use angle brackets for any near term future.",
        "ts": "1474551663.000779"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "wasn't really from the right sources to make anything from it though",
        "ts": "1474551682.000780"
    },
    {
        "type": "message",
        "user": "U04BD6KB1",
        "text": "things like one-way binding by default, etc.",
        "ts": "1474551718.000781"
    },
    {
        "type": "message",
        "user": "U047GTU64",
        "text": "any primers on testing things that use ember-concurrency?",
        "ts": "1474551772.000782"
    },
    {
        "user": "U2ETMPWV8",
        "text": "<@U2ETMPWV8|gbrlmrllo> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1474573794.000783"
    },
    {
        "type": "message",
        "user": "U04TVTLQ8",
        "text": "<@U040MK408>: if eps is glimmer2 does that imply wormhole is fixed?",
        "ts": "1474583894.000784"
    },
    {
        "type": "message",
        "user": "U04TVTLQ8",
        "text": "We're building an app with user generated templates so currently instantiating components based on ED models. That results in LOTS of components which is slow in 2.8. Hoping 2.9 will be faster",
        "ts": "1474583986.000785"
    }
]